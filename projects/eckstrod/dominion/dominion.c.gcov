        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
   221207:   10:int compare(const void* a, const void* b) {
   221207:   11:  if (*(int*)a > *(int*)b)
     9446:   12:    return 1;
   211761:   13:  if (*(int*)a < *(int*)b)
    48764:   14:    return -1;
   162997:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
     4001:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
     4001:   46:  SelectStream(1);
     4001:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
     4001:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
     4001:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    44011:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
   440110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
   400100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
     4001:   75:  if (numPlayers == 2)
        -:   76:    {
     1269:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
     2732:   79:  else if (numPlayers == 3)
        -:   80:    {
     1339:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
     1393:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
     4001:   89:  if (numPlayers == 2)
        -:   90:    {
     1269:   91:      state->supplyCount[estate] = 8;
     1269:   92:      state->supplyCount[duchy] = 8;
     1269:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
     2732:   97:      state->supplyCount[estate] = 12;
     2732:   98:      state->supplyCount[duchy] = 12;
     2732:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
     4001:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4001:  104:  state->supplyCount[silver] = 40;
     4001:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    84021:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
   678084:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
   636083:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    38019:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
     8008:  117:		  if (numPlayers == 2){ 
     1246:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
     2758:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    34015:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    38019:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
   598064:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    16128:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
    12127:  142:      state->deckCount[i] = 0;
    48508:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    36381:  145:	  state->deck[i][j] = estate;
    36381:  146:	  state->deckCount[i]++;
        -:  147:	}
    97016:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    84889:  150:	  state->deck[i][j] = copper;
    84889:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    16128:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
    12127:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
    16128:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
    12127:  168:      state->handCount[i] = 0;
    12127:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
   112028:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
   108027:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
     4001:  184:  state->outpostPlayed = 0;
     4001:  185:  state->phase = 0;
     4001:  186:  state->numActions = 1;
     4001:  187:  state->numBuys = 1;
     4001:  188:  state->playedCardCount = 0;
     4001:  189:  state->whoseTurn = 0;
     4001:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    24006:  194:  for (it = 0; it < 5; it++){
    20005:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
     4001:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
     4001:  200:  return 0;
        -:  201:}
        -:  202:
    12524:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
    12524:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
    12524:  211:  if (state->deckCount[player] < 1)
      356:  212:    return -1;
    12168:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
   153333:  216:  while (state->deckCount[player] > 0) {
   128997:  217:    card = floor(Random() * state->deckCount[player]);
   128997:  218:    newDeck[newDeckPos] = state->deck[player][card];
   128997:  219:    newDeckPos++;
  1080090:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
   951093:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
   128997:  223:    state->deckCount[player]--;
        -:  224:  }
   140157:  225:  for (i = 0; i < newDeckPos; i++) {
   127989:  226:    state->deck[player][i] = newDeck[i];
   127989:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
    12168:  230:  return 0;
        -:  231:}
        -:  232:
       52:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
       52:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
       52:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
       52:  245:  if ( state->numActions < 1 )
        -:  246:    {
       44:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
        8:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
        8:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
        8:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
        8:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
        8:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
        8:  271:  return 0;
        -:  272:}
        -:  273:
       34:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
       34:  282:  who = state->whoseTurn;
        -:  283:
       34:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
       34:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
       34:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
       34:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
       34:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
       34:  301:    state->coins = (state->coins) - (getCost(supplyPos));
       34:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
       34:  310:  return 0;
        -:  311:}
        -:  312:
  1029131:  313:int numHandCards(struct gameState *state) {
  1029131:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
     5026:  317:int handCard(int handPos, struct gameState *state) {
     5026:  318:  int currentPlayer = whoseTurn(state);
     5026:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
       68:  322:int supplyCount(int card, struct gameState *state) {
       68:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
  1058200:  348:int whoseTurn(struct gameState *state) {
  1058200:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
     8023:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
     8023:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
  2018695:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  2010672:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  2010672:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
     8023:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
     8023:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
     6006:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
     2017:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
     8023:  372:  state->outpostPlayed = 0;
     8023:  373:  state->phase = 0;
     8023:  374:  state->numActions = 1;
     8023:  375:  state->coins = 0;
     8023:  376:  state->numBuys = 1;
     8023:  377:  state->playedCardCount = 0;
     8023:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    48138:  382:  for (k = 0; k < 5; k++){
    40115:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
     8023:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
     8023:  389:  return 0;
        -:  390:}
        -:  391:
       35:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
       35:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
       34:  403:  j = 0;
      884:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      850:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
       34:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
       34:  416:  return 0;
        -:  417:}
        -:  418:
        2:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        2:  422:  int score = 0;
        -:  423:  //score from hand
        7:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
        5:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  429:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
       30:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
       28:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
       28:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
       28:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
       28:  440:      if (state->discard[player][i] == province) { score = score + 6; };
       28:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       28:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
       30:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
       28:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
       28:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
       28:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
       28:  451:      if (state->deck[player][i] == province) { score = score + 6; };
       28:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       28:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        2:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
    74385:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
    74385:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
     7959:  535:    for (i = 0; i < state->discardCount[player];i++){
     7727:  536:      state->deck[player][i] = state->discard[player][i];
     7727:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      232:  540:    state->deckCount[player] = state->discardCount[player];
      232:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      232:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      232:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      232:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      232:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      232:  561:    if (deckCounter == 0)
      191:  562:      return -1;
        -:  563:
       41:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       41:  565:    state->deckCount[player]--;
       41:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
    74153:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
    74153:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
    74153:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    74153:  578:    state->deckCount[player]--;
    74153:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
    74194:  582:  return 0;
        -:  583:}
        -:  584:
     4570:  585:int getCost(int cardNumber)
        -:  586:{
     4570:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
        4:  590:      return 0;
        -:  591:    case estate:
      424:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
       16:  596:      return 8;
        -:  597:    case copper:
     1076:  598:      return 0;
        -:  599:    case silver:
       26:  600:      return 3;
        -:  601:    case gold:
       18:  602:      return 6;
        -:  603:    case adventurer:
        4:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
        4:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
     2998:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:////////////////////////
        -:  649://hoisted card effect definitions 
        -:  650:
        -:  651:int smithyAction(int curPlayer, struct gameState *state, int handPos);
        -:  652:int adventurerAction(int curPlayer, struct gameState *state);
        -:  653:int seaHagAttack(int curPlayer, struct gameState *state);
        -:  654:int embargoAction(int curPlayer, struct gameState *state, int handPos, int choice1);
        -:  655:int tributeAction(int curPlayer, struct gameState *state, int handPos);
        -:  656:
        -:  657:////////////////////////
        -:  658:
     7997:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
     7997:  666:  int currentPlayer = whoseTurn(state);
     7997:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:  int temphand[MAX_HAND];// moved above the if statement
        -:  669:  
     7997:  670:  if (nextPlayer > (state->numPlayers - 1)){
     2006:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:	
        -:  674:  //uses switch to select card and perform actions
     7997:  675:  switch( card ) 
        -:  676:    {
        -:  677:    case adventurer:
     2006:  678:      adventurerAction(currentPlayer, state);
     2006:  679:	  return 0;
        -:  680:			
        -:  681:    case council_room:
        -:  682:      //+4 Cards
    #####:  683:      for (i = 0; i < 4; i++)
        -:  684:	{
    #####:  685:	  drawCard(currentPlayer, state);
        -:  686:	}
        -:  687:			
        -:  688:      //+1 Buy
    #####:  689:      state->numBuys++;
        -:  690:			
        -:  691:      //Each other player draws a card
    #####:  692:      for (i = 0; i < state->numPlayers; i++)
        -:  693:	{
    #####:  694:	  if ( i != currentPlayer )
        -:  695:	    {
    #####:  696:	      drawCard(i, state);
        -:  697:	    }
        -:  698:	}
        -:  699:			
        -:  700:      //put played card in played card pile
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:			
    #####:  703:      return 0;
        -:  704:			
        -:  705:    case feast:
        -:  706:      //gain card with cost up to 5
        -:  707:      //Backup hand
    #####:  708:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  709:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:      }
        -:  712:      //Backup hand
        -:  713:
        -:  714:      //Update Coins for Buy
    #####:  715:      updateCoins(currentPlayer, state, 5);
    #####:  716:      x = 1;//Condition to loop on
    #####:  717:      while( x == 1) {//Buy one card
    #####:  718:	if (supplyCount(choice1, state) <= 0){
        -:  719:	  if (DEBUG)
        -:  720:	    printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:	  }
        -:  725:	}
    #####:  726:	else if (state->coins < getCost(choice1)){
    #####:  727:	  printf("That card is too expensive!\n");
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:	  }
        -:  732:	}
        -:  733:	else{
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
    #####:  739:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  740:	  x = 0;//No more buying cards
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:	  }
        -:  745:
        -:  746:	}
        -:  747:      }     
        -:  748:
        -:  749:      //Reset Hand
    #####:  750:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  751:	state->hand[currentPlayer][i] = temphand[i];
    #####:  752:	temphand[i] = -1;
        -:  753:      }
        -:  754:      //Reset Hand
        -:  755:      			
    #####:  756:      return 0;
        -:  757:			
        -:  758:    case gardens:
    #####:  759:      return -1;
        -:  760:			
        -:  761:    case mine:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:		
    #####:  769:      if (choice2 > treasure_map || choice2 < curse)
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 2, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case remodel:
    #####:  797:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  798:
    #####:  799:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  800:	{
    #####:  801:	  return -1;
        -:  802:	}
        -:  803:
    #####:  804:      gainCard(choice2, state, 0, currentPlayer);
        -:  805:
        -:  806:      //discard card from hand
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
        -:  809:      //discard trashed card
    #####:  810:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  811:	{
    #####:  812:	  if (state->hand[currentPlayer][i] == j)
        -:  813:	    {
    #####:  814:	      discardCard(i, currentPlayer, state, 0);			
    #####:  815:	      break;
        -:  816:	    }
        -:  817:	}
        -:  818:
        -:  819:
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case smithy:
     2990:  823:      smithyAction(currentPlayer, state, handPos);
     2990:  824:	  return 0;
        -:  825:		
        -:  826:    case village:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
        -:  829:			
        -:  830:      //+2 Actions
    #####:  831:      state->numActions = state->numActions + 2;
        -:  832:			
        -:  833:      //discard played card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
    #####:  835:      return 0;
        -:  836:		
        -:  837:    case baron:
    #####:  838:      state->numBuys++;//Increase buys by 1!
    #####:  839:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  840:	int p = 0;//Iterator for hand!
    #####:  841:	int card_not_discarded = 1;//Flag for discard set!
    #####:  842:	while(card_not_discarded){
    #####:  843:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  844:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  845:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  846:	    state->discardCount[currentPlayer]++;
    #####:  847:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  848:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  849:	    }
    #####:  850:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  851:	    state->handCount[currentPlayer]--;
    #####:  852:	    card_not_discarded = 0;//Exit the loop
        -:  853:	  }
    #####:  854:	  else if (p > state->handCount[currentPlayer]){
        -:  855:	    if(DEBUG) {
        -:  856:	      printf("No estate cards in your hand, invalid choice\n");
        -:  857:	      printf("Must gain an estate if there are any\n");
        -:  858:	    }
    #####:  859:	    if (supplyCount(estate, state) > 0){
    #####:  860:	      gainCard(estate, state, 0, currentPlayer);
    #####:  861:	      state->supplyCount[estate]--;//Decrement estates
    #####:  862:	      if (supplyCount(estate, state) == 0){
    #####:  863:		isGameOver(state);
        -:  864:	      }
        -:  865:	    }
    #####:  866:	    card_not_discarded = 0;//Exit the loop
        -:  867:	  }
        -:  868:			    
        -:  869:	  else{
    #####:  870:	    p++;//Next card
        -:  871:	  }
        -:  872:	}
        -:  873:      }
        -:  874:			    
        -:  875:      else{
    #####:  876:	if (supplyCount(estate, state) > 0){
    #####:  877:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  878:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  879:	  if (supplyCount(estate, state) == 0){
    #####:  880:	    isGameOver(state);
        -:  881:	  }
        -:  882:	}
        -:  883:      }
        -:  884:	      
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case great_hall:
        -:  888:      //+1 Card
    #####:  889:      drawCard(currentPlayer, state);
        -:  890:			
        -:  891:      //+1 Actions
    #####:  892:      state->numActions++;
        -:  893:			
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case minion:
        -:  899:      //+1 action
    #####:  900:      state->numActions++;
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
        -:  904:			
    #####:  905:      if (choice1)		//+2 coins
        -:  906:	{
    #####:  907:	  state->coins = state->coins + 2;
        -:  908:	}
        -:  909:			
    #####:  910:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  911:	{
        -:  912:	  //discard hand
    #####:  913:	  while(numHandCards(state) > 0)
        -:  914:	    {
    #####:  915:	      discardCard(handPos, currentPlayer, state, 0);
        -:  916:	    }
        -:  917:				
        -:  918:	  //draw 4
    #####:  919:	  for (i = 0; i < 4; i++)
        -:  920:	    {
    #####:  921:	      drawCard(currentPlayer, state);
        -:  922:	    }
        -:  923:				
        -:  924:	  //other players discard hand and redraw if hand size > 4
    #####:  925:	  for (i = 0; i < state->numPlayers; i++)
        -:  926:	    {
    #####:  927:	      if (i != currentPlayer)
        -:  928:		{
    #####:  929:		  if ( state->handCount[i] > 4 )
        -:  930:		    {
        -:  931:		      //discard hand
    #####:  932:		      while( state->handCount[i] > 0 )
        -:  933:			{
    #####:  934:			  discardCard(handPos, i, state, 0);
        -:  935:			}
        -:  936:							
        -:  937:		      //draw 4
    #####:  938:		      for (j = 0; j < 4; j++)
        -:  939:			{
    #####:  940:			  drawCard(i, state);
        -:  941:			}
        -:  942:		    }
        -:  943:		}
        -:  944:	    }
        -:  945:				
        -:  946:	}
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case steward:
    #####:  950:      if (choice1 == 1)
        -:  951:	{
        -:  952:	  //+2 cards
    #####:  953:	  drawCard(currentPlayer, state);
    #####:  954:	  drawCard(currentPlayer, state);
        -:  955:	}
    #####:  956:      else if (choice1 == 2)
        -:  957:	{
        -:  958:	  //+2 coins
    #####:  959:	  state->coins = state->coins + 2;
        -:  960:	}
        -:  961:      else
        -:  962:	{
        -:  963:	  //trash 2 cards in hand
    #####:  964:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  965:	  discardCard(choice3, currentPlayer, state, 1);
        -:  966:	}
        -:  967:			
        -:  968:      //discard card from hand
    #####:  969:      discardCard(handPos, currentPlayer, state, 0);
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case tribute:
    #####:  973:      tributeAction(currentPlayer, state, handPos);
    #####:  974:	  return 0;
        -:  975:		
        -:  976:    case ambassador:
    #####:  977:      j = 0;		//used to check if player has enough cards to discard
        -:  978:
    #####:  979:      if (choice2 > 2 || choice2 < 0)
        -:  980:	{
    #####:  981:	  return -1;				
        -:  982:	}
        -:  983:
    #####:  984:      if (choice1 == handPos)
        -:  985:	{
    #####:  986:	  return -1;
        -:  987:	}
        -:  988:
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  990:	{
    #####:  991:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  992:	    {
    #####:  993:	      j++;
        -:  994:	    }
        -:  995:	}
    #####:  996:      if (j < choice2)
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
        -: 1001:      if (DEBUG) 
        -: 1002:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1003:
        -: 1004:      //increase supply count for choosen card by amount being discarded
    #####: 1005:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1006:			
        -: 1007:      //each other player gains a copy of revealed card
    #####: 1008:      for (i = 0; i < state->numPlayers; i++)
        -: 1009:	{
    #####: 1010:	  if (i != currentPlayer)
        -: 1011:	    {
    #####: 1012:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1013:	    }
        -: 1014:	}
        -: 1015:
        -: 1016:      //discard played card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1018:
        -: 1019:      //trash copies of cards returned to supply
    #####: 1020:      for (j = 0; j < choice2; j++)
        -: 1021:	{
    #####: 1022:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1023:	    {
    #####: 1024:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1025:		{
    #####: 1026:		  discardCard(i, currentPlayer, state, 1);
    #####: 1027:		  break;
        -: 1028:		}
        -: 1029:	    }
        -: 1030:	}			
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case cutpurse:
        -: 1035:
    #####: 1036:      updateCoins(currentPlayer, state, 2);
    #####: 1037:      for (i = 0; i < state->numPlayers; i++)
        -: 1038:	{
    #####: 1039:	  if (i != currentPlayer)
        -: 1040:	    {
    #####: 1041:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1042:		{
    #####: 1043:		  if (state->hand[i][j] == copper)
        -: 1044:		    {
    #####: 1045:		      discardCard(j, i, state, 0);
    #####: 1046:		      break;
        -: 1047:		    }
    #####: 1048:		  if (j == state->handCount[i])
        -: 1049:		    {
    #####: 1050:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1051:			{
        -: 1052:			  if (DEBUG)
        -: 1053:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1054:			}	
    #####: 1055:		      break;
        -: 1056:		    }		
        -: 1057:		}
        -: 1058:					
        -: 1059:	    }
        -: 1060:				
        -: 1061:	}				
        -: 1062:
        -: 1063:      //discard played card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1065:
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case embargo: 
    #####: 1069:      embargoAction(currentPlayer, state, handPos, choice1);
    #####: 1070:	  return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
     3001: 1082:      state->numBuys++;
        -: 1083:			
     3001: 1084:      if (choice1)
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
     1501: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1088:	  //trash card
     1501: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
     3001: 1093:      discardCard(handPos, currentPlayer, state, 0);
     3001: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      seaHagAttack(currentPlayer, state);
    #####: 1098:	  return 0;
        -: 1099:		
        -: 1100:    case treasure_map:
        -: 1101:      //search hand for another treasure_map
    #####: 1102:      index = -1;
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1104:	{
    #####: 1105:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1106:	    {
    #####: 1107:	      index = i;
    #####: 1108:	      break;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (index > -1)
        -: 1112:	{
        -: 1113:	  //trash both treasure cards
    #####: 1114:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1115:	  discardCard(index, currentPlayer, state, 1);
        -: 1116:
        -: 1117:	  //gain 4 Gold cards
    #####: 1118:	  for (i = 0; i < 4; i++)
        -: 1119:	    {
    #####: 1120:	      gainCard(gold, state, 1, currentPlayer);
        -: 1121:	    }
        -: 1122:				
        -: 1123:	  //return success
    #####: 1124:	  return 1;
        -: 1125:	}
        -: 1126:			
        -: 1127:      //no second treasure_map found in hand
    #####: 1128:      return -1;
        -: 1129:    }
        -: 1130:	
    #####: 1131:  return -1;
        -: 1132:}
        -: 1133:
        -: 1134:////////////////////////
        -: 1135://define card actions
        -: 1136:
     2990: 1137:int smithyAction(int curPlayer, struct gameState *state, int handPos)
        -: 1138:{
        -: 1139:	int i;
        -: 1140:	//+3 Cards
     8970: 1141:    for (i = 1; i < 3; i++) //added bug: i should = 0
        -: 1142:	{
     5980: 1143:	  drawCard(curPlayer, state);
        -: 1144:	}
        -: 1145:			
        -: 1146:    //discard card from hand
     2990: 1147:    discardCard(handPos, curPlayer, state, 0);
     2990: 1148:    return 0;
        -: 1149:}
        -: 1150:
     2006: 1151:int adventurerAction(int curPlayer, struct gameState *state)
        -: 1152:{
     2006: 1153:	int drawntreasure = 0;
        -: 1154:	int cardDrawn;
        -: 1155:	int temphand[MAX_HAND];
     2006: 1156:	int i = 0;
        -: 1157:	  
    12297: 1158:	while(drawntreasure <= 2) //added bug: drawntreasure should be < 2
        -: 1159:	{
        -: 1160:		//if the deck is empty we need to shuffle discard and add to deck
     8285: 1161:		if (state->deckCount[curPlayer] <1)
        -: 1162:		{
      165: 1163:		  shuffle(curPlayer, state);
        -: 1164:		}
     8285: 1165:		drawCard(curPlayer, state);
     8285: 1166:		cardDrawn = state->hand[curPlayer][state->handCount[curPlayer]-1];
        -: 1167:		
        -: 1168:		//top card of hand is most recently drawn card.
     8285: 1169:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1170:		{
     6018: 1171:			drawntreasure++;
        -: 1172:		}
        -: 1173:		
        -: 1174:		else
        -: 1175:		{
     2267: 1176:			temphand[i]=cardDrawn;
     2267: 1177:			state->handCount[curPlayer]--; //this should just remove the top card (the most recently drawn one).
     2267: 1178:			i++;
        -: 1179:		}
        -: 1180:    }
        -: 1181:    
     6279: 1182:	while(i-1 >= 0)
        -: 1183:	{
     2267: 1184:		state->discard[curPlayer][state->discardCount[curPlayer]++]=temphand[i-1]; // discard all cards in play that have been drawn
     2267: 1185:		i=i-1;
        -: 1186:    }
        -: 1187:    
     2006: 1188:	return 0;
        -: 1189:}
        -: 1190:
    #####: 1191:int seaHagAttack(int curPlayer, struct gameState *state)
        -: 1192:{
        -: 1193:	int i;
        -: 1194:	
    #####: 1195:	for (i = 0; i < state->numPlayers; i++)
        -: 1196:	{
    #####: 1197:		if (i != curPlayer) 
        -: 1198:		{
    #####: 1199:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1200:			state->deckCount[i]--;
    #####: 1201:			state->discardCount[i]++;
    #####: 1202:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1203:		}
        -: 1204:      }
    #####: 1205:      return 0;
        -: 1206:}
        -: 1207:
    #####: 1208:int embargoAction(int curPlayer, struct gameState *state, int handPos, int choice1)
        -: 1209:{
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] != -1 )//added bug: should be equality (==) not does not equal (!=)
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, curPlayer, state, 1);		
        -: 1224:    
    #####: 1225:	return 0;
        -: 1226:}
        -: 1227:
    #####: 1228:int tributeAction(int curPlayer, struct gameState *state, int handPos)
        -: 1229:{
        -: 1230:	int i;
    #####: 1231:	int tributeRevealedCards[2] = {-1, -1};
    #####: 1232:	int nextPlayer = curPlayer + 1;
        -: 1233:	
    #####: 1234:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1235:	{
    #####: 1236:		if (state->deckCount[nextPlayer] > 0)
        -: 1237:		{
    #####: 1238:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1239:			state->deckCount[nextPlayer]--;
        -: 1240:		}
        -: 1241:		
    #####: 1242:		else if (state->discardCount[nextPlayer] > 0)
        -: 1243:		{
    #####: 1244:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1245:			state->discardCount[nextPlayer]--;
        -: 1246:		}
        -: 1247:	
        -: 1248:		else
        -: 1249:		{
        -: 1250:			//No Card to Reveal
        -: 1251:			if (DEBUG)
        -: 1252:			{
        -: 1253:				printf("No cards to reveal\n");
        -: 1254:			}
        -: 1255:		}
        -: 1256:    }
        -: 1257:	    
        -: 1258:    else
        -: 1259:	{
    #####: 1260:		if (state->deckCount[nextPlayer] == 0)
        -: 1261:		{
    #####: 1262:			for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1263:			{
    #####: 1264:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1265:			state->deckCount[nextPlayer]++;
    #####: 1266:			state->discard[nextPlayer][i] = -1;
    #####: 1267:			state->discardCount[nextPlayer]--;
        -: 1268:			}
        -: 1269:			    
    #####: 1270:		shuffle(nextPlayer,state);//Shuffle the deck
        -: 1271:		} 
        -: 1272:	
    #####: 1273:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1274:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1275:		state->deckCount[nextPlayer]--;
    #####: 1276:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1277:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1278:		state->deckCount[nextPlayer]--;
        -: 1279:    }    
        -: 1280:	
        -: 1281:	//If we have a duplicate card, just drop one	
    #####: 1282:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1283:	{ 
    #####: 1284:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1285:		state->playedCardCount++;
    #####: 1286:		tributeRevealedCards[1] = -1;
        -: 1287:    }
        -: 1288:
    #####: 1289:    for (i = 0; i <= 2; i ++)
        -: 1290:	{
        -: 1291:		//Treasure cards
    #####: 1292:		if (tributeRevealedCards[i] == copper || (tributeRevealedCards[i] == silver && tributeRevealedCards[i] == gold))//added bug: should be or (||) not and (&&) tributeRevealedCards[i] == gold
        -: 1293:		{
    #####: 1294:			state->coins += 2;
        -: 1295:		}
        -: 1296:		
        -: 1297:		//Victory Card Found
    #####: 1298:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1299:		{
    #####: 1300:			drawCard(curPlayer, state);
    #####: 1301:			drawCard(curPlayer, state);
        -: 1302:		}
        -: 1303:	
        -: 1304:		//Action Card
        -: 1305:		else
        -: 1306:		{
    #####: 1307:			state->numActions = state->numActions + 2;
        -: 1308:		}
        -: 1309:    }
        -: 1310:	    
    #####: 1311:    return 0;
        -: 1312:}
        -: 1313:////////////////////////
        -: 1314:
        -: 1315:
     7492: 1316:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1317:{
        -: 1318:	
        -: 1319:  //if card is not trashed, added to Played pile 
     7492: 1320:  if (trashFlag < 1)
        -: 1321:    {
        -: 1322:      //add card to played pile
     5991: 1323:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5991: 1324:      state->playedCardCount++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //set played card to -1
     7492: 1328:  state->hand[currentPlayer][handPos] = -1;
        -: 1329:	
        -: 1330:  //remove card from player's hand
     7492: 1331:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1332:    {
        -: 1333:      //reduce number of cards in hand
       39: 1334:      state->handCount[currentPlayer]--;
        -: 1335:    }
     7453: 1336:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1337:    {
        -: 1338:      //reduce number of cards in hand
        7: 1339:      state->handCount[currentPlayer]--;
        -: 1340:    }
        -: 1341:  else 	
        -: 1342:    {
        -: 1343:      //replace discarded card with last card in hand
     7446: 1344:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1345:      //set last card to -1
     7446: 1346:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1347:      //reduce number of cards in hand
     7446: 1348:      state->handCount[currentPlayer]--;
        -: 1349:    }
        -: 1350:	
     7492: 1351:  return 0;
        -: 1352:}
        -: 1353:
       34: 1354:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1355:{
        -: 1356:  //Note: supplyPos is enum of choosen card
        -: 1357:	
        -: 1358:  //check if supply pile is empty (0) or card is not used in game (-1)
       34: 1359:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1360:    {
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:	
        -: 1364:  //added card for [whoseTurn] current player:
        -: 1365:  // toFlag = 0 : add to discard
        -: 1366:  // toFlag = 1 : add to deck
        -: 1367:  // toFlag = 2 : add to hand
        -: 1368:
       34: 1369:  if (toFlag == 1)
        -: 1370:    {
    #####: 1371:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1372:      state->deckCount[player]++;
        -: 1373:    }
       34: 1374:  else if (toFlag == 2)
        -: 1375:    {
    #####: 1376:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1377:      state->handCount[player]++;
        -: 1378:    }
        -: 1379:  else
        -: 1380:    {
       34: 1381:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       34: 1382:      state->discardCount[player]++;
        -: 1383:    }
        -: 1384:	
        -: 1385:  //decrease number in supply pile
       34: 1386:  state->supplyCount[supplyPos]--;
        -: 1387:	 
       34: 1388:  return 0;
        -: 1389:}
        -: 1390:
    14032: 1391:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1392:{
        -: 1393:  int i;
        -: 1394:	
        -: 1395:  //reset coin count
    14032: 1396:  state->coins = 0;
        -: 1397:
        -: 1398:  //add coins for each Treasure card in player's hand
   583072: 1399:  for (i = 0; i < state->handCount[player]; i++)
        -: 1400:    {
   569040: 1401:      if (state->hand[player][i] == copper)
        -: 1402:	{
    50621: 1403:	  state->coins += 1;
        -: 1404:	}
   518419: 1405:      else if (state->hand[player][i] == silver)
        -: 1406:	{
       45: 1407:	  state->coins += 2;
        -: 1408:	}
   518374: 1409:      else if (state->hand[player][i] == gold)
        -: 1410:	{
       18: 1411:	  state->coins += 3;
        -: 1412:	}	
        -: 1413:    }	
        -: 1414:
        -: 1415:  //add bonus
    14032: 1416:  state->coins += bonus;
        -: 1417:
    14032: 1418:  return 0;
        -: 1419:}
        -: 1420:
        -: 1421:
        -: 1422://end of dominion.c
        -: 1423:
