        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        6:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        6:   11:	if(a == b)
        -:   12:	{
        4:   13:		printf("%s Test Successful\n", testName);
        -:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
        2:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        6:   20:}
        -:   21:
        -:   22://Random Kingdom Card
        1:   23:int randomCard()
        -:   24:{
        1:   25:	int card = (rand() % 10);
        -:   26:	
        1:   27:	return card;
        -:   28:}
        -:   29:
        1:   30:int main(int argc, char *argv[])
        -:   31:{
        1:   32:	int numPlayers = 2;
        1:   33:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        1:   34:	int seed = 10;
        -:   35:	struct gameState state;
        1:   36:	int choice1 = 0; //Required for this card
        1:   37:	int choice2 = 0;
        1:   38:	int choice3 = 0;
        1:   39:	int handpos = 0;
        1:   40:	int bonus = 0;
        1:   41:	int r = randomCard(); //get a random number between 0 and 9
        -:   42:   
        -:   43:	//Print which test is being run
        1:   44:	printf("Card Test - Salvager - Without Trashing\n");
        -:   45:	
        1:   46:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        1:   47:	if(initSuccess != 0)
        -:   48:	{
    #####:   49:	   printf("Game failed to initialize\n");
        -:   50:	}
        -:   51:    
        -:   52:	//State of Game Before Salvager is Played
        1:   53:	int fullDeckSizeBefore = state.deckCount[whoseTurn(&state)] + state.handCount[whoseTurn(&state)] + state.discardCount[whoseTurn(&state)];;
        1:   54:	int numBuys = state.numBuys;
        1:   55:	int moneyToSpend = state.coins;
        -:   56:	
        -:   57:	//Play Salvager
        1:   58:	cardEffect(salvager, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   59:   
        -:   60:	//State of Game After Salvager is Played
        1:   61:	int fullDeckSizeAfter = state.deckCount[whoseTurn(&state)] + state.handCount[whoseTurn(&state)] + state.discardCount[whoseTurn(&state)];
        -:   62:	
        -:   63:	//Test Correct Deck Size - Should Remain Unchanged
        1:   64:	assertTrue(fullDeckSizeBefore, fullDeckSizeAfter, "Correct Full Deck Size -");
        -:   65:	
        -:   66:	//Test Correct Number of Buys Remaining
        1:   67:	assertTrue(numBuys + 1, state.numBuys, "Correct Number of Buys Remaining -");
        -:   68:	
        -:   69:	//Test Correct Amount Money to Spend - Should Remain Unchanged
        1:   70:	assertTrue(moneyToSpend, state.coins, "Correct Amount Money to Spend -");
        -:   71:	
        -:   72:	//Change Choice
        -:   73:	//Get a Random Kingdom Card
        1:   74:	choice1 = k[r];
        -:   75:	
        -:   76:	//Print which test is being run
        1:   77:	printf("Card Test - Salvager - Trashing %d\n", choice1);
        -:   78:	
        -:   79:	//State of Game Before Salvager is Played
        1:   80:	fullDeckSizeBefore = state.deckCount[whoseTurn(&state)] + state.handCount[whoseTurn(&state)] + state.discardCount[whoseTurn(&state)];
        1:   81:	numBuys = state.numBuys;
        1:   82:	moneyToSpend = state.coins;
        1:   83:	int valueChoice = getCost(handCard(choice1, &state));
        -:   84:	
        -:   85:	//Play Salvager
        1:   86:	cardEffect(salvager, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   87:   
        -:   88:	//State of Game After Salvager is Played
        -:   89:	//Test Correct Full Deck Size - One Card Should be Trashed
        1:   90:	assertTrue(fullDeckSizeBefore - 1, fullDeckSizeAfter, "Correct Full Deck Size -");
        -:   91:	
        -:   92:	//Test Correct Number of Buys Remaining
        1:   93:	assertTrue(numBuys + 1, state.numBuys, "Correct Number of Buys Remaining -");
        -:   94:	
        -:   95:	//Test Correct Amount Money to Spend - Additional $ Should be Available 
        1:   96:	assertTrue(moneyToSpend + valueChoice, state.coins, "Correct Amount Money to Spend -");
        -:   97:	 
        1:   98:	return 0;   
        -:   99:}
        -:  100:
        -:  101:
