        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://Custom Assert Function
        3:    9:void assertTrue(int a, int b, char* testName)
        -:   10:{
        3:   11:	if(a == b)
        -:   12:	{
        3:   13:		printf("%s Test Successful\n", testName);
        -:   14:	}
        -:   15:	
        -:   16:	else
        -:   17:	{
    #####:   18:		printf("%s Test Failed\n", testName);
        -:   19:	}
        3:   20:}
        -:   21:
        1:   22:int main(int argc, char *argv[])
        -:   23:{
        1:   24:	int numPlayers = 2;
        1:   25:	int k[10] = {smithy, adventurer, council_room, feast, gardens, mine, remodel, village, salvager, great_hall};
        1:   26:	int seed = 10;
        -:   27:	struct gameState state;
        -:   28:   
        -:   29:	//Print which test is being run
        1:   30:	printf("Unit Test - Gain Card\n");
        -:   31:	
        1:   32:	int initSuccess = initializeGame(numPlayers, k, seed, &state);
        1:   33:	if(initSuccess != 0)
        -:   34:	{
    #####:   35:	   printf("Game failed to initialize\n");
        -:   36:	}
        -:   37:	
        -:   38:	//Set Card Counts
        1:   39:	state.discardCount[whoseTurn(&state)] = 0;
        1:   40:	state.deckCount[whoseTurn(&state)] = 0;
        1:   41:	state.handCount[whoseTurn(&state)] = 0;
        -:   42:	
        -:   43:	
        -:   44:	//Test Discard Gains Card
        1:   45:	gainCard(copper, &state, 0, whoseTurn(&state));
        1:   46:	assertTrue(1, state.discardCount[whoseTurn(&state)], "Discard Pile Gains Card -");
        -:   47:	
        -:   48:	//Test Deck Gains Card
        1:   49:	gainCard(copper, &state, 1, whoseTurn(&state));
        1:   50:	assertTrue(1, state.deckCount[whoseTurn(&state)], "Deck Gains Card -");		
        -:   51:	
        -:   52:	//Test Hand Gains Card
        1:   53:	gainCard(copper, &state, 2, whoseTurn(&state));
        1:   54:	assertTrue(1, state.handCount[whoseTurn(&state)], "Hand Pile Gains Card -");	
        -:   55:	
        1:   56:    return 0;
        -:   57:}
        -:   58:
        -:   59:
        -:   60:
        -:   61:
        -:   62:
        -:   63:
        -:   64:
        -:   65:
        -:   66:
        -:   67:
