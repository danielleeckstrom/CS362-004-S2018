dominion.c:
File 'dominion.c'
Lines executed:44.82% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   187051:    8:int compare(const void* a, const void* b) {
   187051:    9:    if (*(int*)a > *(int*)b)
    11464:   10:	return 1;
   175587:   11:    if (*(int*)a < *(int*)b)
    36277:   12:	return -1;
   139310:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
     3008:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:	struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
     3008:   44:    SelectStream(1);
     3008:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
     3008:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:	return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
     3008:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    33088:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
   330880:   59:	for (j = 0; j < 10; j++)
        -:   60:	{
   300800:   61:	    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:		return -1;
        -:   64:	    }
        -:   65:	}
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
     3008:   73:    if (numPlayers == 2)
        -:   74:    {
      993:   75:	state->supplyCount[curse] = 10;
        -:   76:    }
     2015:   77:    else if (numPlayers == 3)
        -:   78:    {
     1030:   79:	state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
      985:   83:	state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
     3008:   87:    if (numPlayers == 2)
        -:   88:    {
      993:   89:	state->supplyCount[estate] = 8;
      993:   90:	state->supplyCount[duchy] = 8;
      993:   91:	state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
     2015:   95:	state->supplyCount[estate] = 12;
     2015:   96:	state->supplyCount[duchy] = 12;
     2015:   97:	state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
     3008:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     3008:  102:    state->supplyCount[silver] = 40;
     3008:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
    63168:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   510288:  108:	for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   478656:  110:	    if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:		//check if card is a 'Victory' Kingdom card
    28528:  113:		if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     6138:  115:		    if (numPlayers == 2){ 
     1000:  116:			state->supplyCount[i] = 8; 
        -:  117:		    }
     2069:  118:		    else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:		else
        -:  121:		{
    25459:  122:		    state->supplyCount[i] = 10;
        -:  123:		}
    28528:  124:		break;
        -:  125:	    }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
   450128:  128:		state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
    12024:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
     9016:  140:	state->deckCount[i] = 0;
    36064:  141:	for (j = 0; j < 3; j++)
        -:  142:	{
    27048:  143:	    state->deck[i][j] = estate;
    27048:  144:	    state->deckCount[i]++;
        -:  145:	}
    72128:  146:	for (j = 3; j < 10; j++)
        -:  147:	{
    63112:  148:	    state->deck[i][j] = copper;
    63112:  149:	    state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
    12024:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
     9016:  156:	if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	    return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
    12024:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:	//initialize hand size to zero
     9016:  166:	state->handCount[i] = 0;
     9016:  167:	state->discardCount[i] = 0;
        -:  168:	//draw 5 cards
        -:  169:	// for (j = 0; j < 5; j++)
        -:  170:	//	{
        -:  171:	//	  drawCard(i, state);
        -:  172:	//	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
    84224:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    81216:  178:	state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
     3008:  182:    state->outpostPlayed = 0;
     3008:  183:    state->phase = 0;
     3008:  184:    state->numActions = 1;
     3008:  185:    state->numBuys = 1;
     3008:  186:    state->playedCardCount = 0;
     3008:  187:    state->whoseTurn = 0;
     3008:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
    18048:  192:    for (it = 0; it < 5; it++){
    15040:  193:	drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
     3008:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
     3008:  198:    return 0;
        -:  199:}
        -:  200:
     9139:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
     9139:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
     9139:  209:    if (state->deckCount[player] < 1)
       96:  210:	return -1;
     9043:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   117874:  214:    while (state->deckCount[player] > 0) {
    99788:  215:	card = floor(Random() * state->deckCount[player]);
    99788:  216:	newDeck[newDeckPos] = state->deck[player][card];
    99788:  217:	newDeckPos++;
  1530507:  218:	for (i = card; i < state->deckCount[player]-1; i++) {
  1430719:  219:	    state->deck[player][i] = state->deck[player][i+1];
        -:  220:	}
    99788:  221:	state->deckCount[player]--;
        -:  222:    }
   105313:  223:    for (i = 0; i < newDeckPos; i++) {
    96270:  224:	state->deck[player][i] = newDeck[i];
    96270:  225:	state->deckCount[player]++;
        -:  226:    }
        -:  227:
     9043:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:	return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:	return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:	return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:	return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:	printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:	if (DEBUG)
        -:  284:	    printf("You do not have any buys left\n");
    #####:  285:	return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:	if (DEBUG)
        -:  288:	    printf("There are not any of that type of card left\n");
    #####:  289:	return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:	if (DEBUG) 
        -:  292:	    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:	return -1;
        -:  294:    } else {
    #####:  295:	state->phase=1;
        -:  296:	//state->supplyCount[supplyPos]--;
    #####:  297:	gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:	state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:	state->numBuys--;
        -:  301:	if (DEBUG)
        -:  302:	    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
   497748:  311:int numHandCards(struct gameState *state) {
   497748:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     4469:  315:int handCard(int handPos, struct gameState *state) {
     4469:  316:    int currentPlayer = whoseTurn(state);
     4469:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     5124:  320:int supplyCount(int card, struct gameState *state) {
     5124:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:	if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:	if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:	if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
   523355:  346:int whoseTurn(struct gameState *state) {
   523355:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
     7036:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
     7036:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
  1768758:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
  1761722:  357:	state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1761722:  358:	state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
     7036:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
     7036:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
     5036:  364:	state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
     2000:  367:	state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
     7036:  370:    state->outpostPlayed = 0;
     7036:  371:    state->phase = 0;
     7036:  372:    state->numActions = 1;
     7036:  373:    state->coins = 0;
     7036:  374:    state->numBuys = 1;
     7036:  375:    state->playedCardCount = 0;
     7036:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    42216:  380:    for (k = 0; k < 5; k++){
    35180:  381:	drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
     7036:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
     7036:  387:    return 0;
        -:  388:}
        -:  389:
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
        4:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:	return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
        3:  401:    j = 0;
       78:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
       75:  404:	if (state->supplyCount[i] == 0)
        -:  405:	{
        3:  406:	    j++;
        -:  407:	}
        -:  408:    }
        3:  409:    if ( j >= 3)
        -:  410:    {
        1:  411:	return 1;
        -:  412:    }
        -:  413:
        2:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:	if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:	if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:	if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:	if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:	if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:	if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:	if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:	if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:	if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:	if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:	if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:	if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:	if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:	if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:	if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:	if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:	if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:	if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:	//set unused player scores to -9999
    #####:  467:	if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	    players[i] = -9999;
        -:  470:	}
        -:  471:	else
        -:  472:	{
    #####:  473:	    players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:	if (players[i] > players[j])
        -:  482:	{
    #####:  483:	    j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:	if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	    players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:	if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	    j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:	if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	    players[i] = 1;
        -:  515:	}
        -:  516:	else
        -:  517:	{
    #####:  518:	    players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
    67985:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
    67985:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:	//Step 1 Shuffle the discard pile back into a deck
        -:  531:	int i;
        -:  532:	//Move discard to deck
     9739:  533:	for (i = 0; i < state->discardCount[player];i++){
     9618:  534:	    state->deck[player][i] = state->discard[player][i];
     9618:  535:	    state->discard[player][i] = -1;
        -:  536:	}
        -:  537:
      121:  538:	state->deckCount[player] = state->discardCount[player];
      121:  539:	state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:	//Shufffle the deck
      121:  542:	shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:	if (DEBUG){//Debug statements
        -:  545:	    printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:	}
        -:  547:
      121:  548:	state->discardCount[player] = 0;
        -:  549:
        -:  550:	//Step 2 Draw Card
      121:  551:	count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:	if (DEBUG){//Debug statements
        -:  554:	    printf("Current hand count: %d\n", count);
        -:  555:	}
        -:  556:
      121:  557:	deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      121:  559:	if (deckCounter == 0)
       95:  560:	    return -1;
        -:  561:
       26:  562:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       26:  563:	state->deckCount[player]--;
       26:  564:	state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
    67864:  568:	int count = state->handCount[player];//Get current hand count for player
        -:  569:	int deckCounter;
        -:  570:	if (DEBUG){//Debug statements
        -:  571:	    printf("Current hand count: %d\n", count);
        -:  572:	}
        -:  573:
    67864:  574:	deckCounter = state->deckCount[player];//Create holder for the deck count
    67864:  575:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    67864:  576:	state->deckCount[player]--;
    67864:  577:	state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
    67890:  580:    return 0;
        -:  581:}
        -:  582:
     4469:  583:int getCost(int cardNumber)
        -:  584:{
     4469:  585:    switch( cardNumber ) 
        -:  586:    {
        -:  587:	case curse:
        4:  588:	    return 0;
        -:  589:	case estate:
      482:  590:	    return 2;
        -:  591:	case duchy:
    #####:  592:	    return 5;
        -:  593:	case province:
    #####:  594:	    return 8;
        -:  595:	case copper:
     1115:  596:	    return 0;
        -:  597:	case silver:
    #####:  598:	    return 3;
        -:  599:	case gold:
    #####:  600:	    return 6;
        -:  601:	case adventurer:
    #####:  602:	    return 6;
        -:  603:	case council_room:
    #####:  604:	    return 5;
        -:  605:	case feast:
    #####:  606:	    return 4;
        -:  607:	case gardens:
    #####:  608:	    return 4;
        -:  609:	case mine:
    #####:  610:	    return 5;
        -:  611:	case remodel:
    #####:  612:	    return 4;
        -:  613:	case smithy:
    #####:  614:	    return 4;
        -:  615:	case village:
    #####:  616:	    return 3;
        -:  617:	case baron:
    #####:  618:	    return 4;
        -:  619:	case great_hall:
    #####:  620:	    return 3;
        -:  621:	case minion:
    #####:  622:	    return 5;
        -:  623:	case steward:
    #####:  624:	    return 3;
        -:  625:	case tribute:
    #####:  626:	    return 5;
        -:  627:	case ambassador:
    #####:  628:	    return 3;
        -:  629:	case cutpurse:
    #####:  630:	    return 4;
        -:  631:	case embargo: 
    #####:  632:	    return 2;
        -:  633:	case outpost:
    #####:  634:	    return 5;
        -:  635:	case salvager:
    #####:  636:	    return 4;
        -:  637:	case sea_hag:
    #####:  638:	    return 4;
        -:  639:	case treasure_map:
    #####:  640:	    return 4;
        -:  641:    }
        -:  642:
     2868:  643:    return -1;
        -:  644:}
        -:  645://hoisted play<Card> declarations to remove compiler warning  
        -:  646:int playAdventurer(struct gameState *state, int currentPlayer, int *temphand);
        -:  647:int playGreatHall(struct gameState *state, int currentPlayer, int handPos);
        -:  648:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos);
        -:  649:int playSmithy(struct gameState *state, int currentPlayer, int handPos);
        -:  650:int playVillage(struct gameState *state, int currentPlayer, int handPos);
        -:  651:
     7040:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:    int i;
        -:  655:    int j;
        -:  656:    int k;
        -:  657:	int x;
        -:  658:    int index;
     7040:  659:    int currentPlayer = whoseTurn(state);
     7040:  660:    int nextPlayer = currentPlayer + 1;
        -:  661:
     7040:  662:    int tributeRevealedCards[2] = {-1, -1};
        -:  663:    int temphand[MAX_HAND];// moved above the if statement
        -:  664:	//int drawntreasure=0;
        -:  665:	//int cardDrawn;
     7040:  666:    if (nextPlayer > (state->numPlayers - 1)){
     2000:  667:	nextPlayer = 0;
        -:  668:    }
        -:  669:
        -:  670:
        -:  671:    //uses switch to select card and perform actions
     7040:  672:    switch( card ) 
        -:  673:    {
        -:  674:	case adventurer:
        -:  675:	  /*
        -:  676:	  while(drawntreasure<2){
        -:  677:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  678:	  shuffle(currentPlayer, state);
        -:  679:	}
        -:  680:	drawCard(currentPlayer, state);
        -:  681:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  682:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  683:	  drawntreasure++;
        -:  684:	else{
        -:  685:	  temphand[z]=cardDrawn;
        -:  686:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  687:	  z++;
        -:  688:	}
        -:  689:      }
        -:  690:      while(z-1>=0){
        -:  691:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  692:	z=z-1;
        -:  693:      }
        -:  694:	  return 0;
        -:  695:	  */
        -:  696:
     1001:  697:	playAdventurer(state, currentPlayer, temphand);
     1001:  698:	return 0;
        -:  699:
        -:  700:	case council_room:
        -:  701:	/*
        -:  702:      //+4 Cards
        -:  703:      for (i = 0; i < 4; i++)
        -:  704:	{
        -:  705:	  drawCard(currentPlayer, state);
        -:  706:	}
        -:  707:			
        -:  708:      //+1 Buy
        -:  709:      state->numBuys++;
        -:  710:			
        -:  711:      //Each other player draws a card
        -:  712:      for (i = 0; i < state->numPlayers; i++)
        -:  713:	{
        -:  714:	  if ( i != currentPlayer )
        -:  715:	    {
        -:  716:	      drawCard(i, state);
        -:  717:	    }
        -:  718:	}
        -:  719:			
        -:  720:      //put played card in played card pile
        -:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:			
        -:  723:      return 0;
        -:  724:	*/
    #####:  725:	playCouncilRoom(state, currentPlayer, handPos);
        -:  726:
        -:  727:    case feast:
        -:  728:      //gain card with cost up to 5
        -:  729:      //Backup hand
    #####:  730:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  731:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  732:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  733:      }
        -:  734:      //Backup hand
        -:  735:
        -:  736:      //Update Coins for Buy
    #####:  737:      updateCoins(currentPlayer, state, 5);
    #####:  738:      x = 1;//Condition to loop on
    #####:  739:      while( x == 1) {//Buy one card
    #####:  740:	if (supplyCount(choice1, state) <= 0){
        -:  741:	  if (DEBUG)
        -:  742:	    printf("None of that card left, sorry!\n");
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  746:	  }
        -:  747:	}
    #####:  748:	else if (state->coins < getCost(choice1)){
    #####:  749:	  printf("That card is too expensive!\n");
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  753:	  }
        -:  754:	}
        -:  755:	else{
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  759:	  }
        -:  760:
    #####:  761:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  762:	  x = 0;//No more buying cards
        -:  763:
        -:  764:	  if (DEBUG){
        -:  765:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:	  }
        -:  767:
        -:  768:	}
        -:  769:      }     
        -:  770:
        -:  771:      //Reset Hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	state->hand[currentPlayer][i] = temphand[i];
    #####:  774:	temphand[i] = -1;
        -:  775:      }
        -:  776:      //Reset Hand
        -:  777:      			
    #####:  778:      return 0;
        -:  779:
        -:  780:	case gardens:
    #####:  781:	    return -1;
        -:  782:
        -:  783:	case mine:
    #####:  784:	    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  785:
    #####:  786:	    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  787:	    {
    #####:  788:		return -1;
        -:  789:	    }
        -:  790:
    #####:  791:	    if (choice2 > treasure_map || choice2 < curse)
        -:  792:	    {
    #####:  793:		return -1;
        -:  794:	    }
        -:  795:
    #####:  796:	    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  797:	    {
    #####:  798:		return -1;
        -:  799:	    }
        -:  800:
    #####:  801:	    gainCard(choice2, state, 2, currentPlayer);
        -:  802:
        -:  803:	    //discard card from hand
    #####:  804:	    discardCard(handPos, currentPlayer, state, 0);
        -:  805:
        -:  806:	    //discard trashed card
    #####:  807:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  808:	    {
    #####:  809:		if (state->hand[currentPlayer][i] == j)
        -:  810:		{
    #####:  811:		    discardCard(i, currentPlayer, state, 0);			
    #####:  812:		    break;
        -:  813:		}
        -:  814:	    }
    #####:  815:	    return 0;
        -:  816:
        -:  817:	case remodel:
    #####:  818:	    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  819:
    #####:  820:	    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  821:	    {
    #####:  822:		return -1;
        -:  823:	    }
        -:  824:
    #####:  825:	    gainCard(choice2, state, 0, currentPlayer);
        -:  826:
        -:  827:	    //discard card from hand
    #####:  828:	    discardCard(handPos, currentPlayer, state, 0);
        -:  829:
        -:  830:	    //discard trashed card
    #####:  831:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  832:	    {
    #####:  833:		if (state->hand[currentPlayer][i] == j)
        -:  834:		{
    #####:  835:		    discardCard(i, currentPlayer, state, 0);			
    #####:  836:		    break;
        -:  837:		}
        -:  838:	    }
        -:  839:
        -:  840:
    #####:  841:	    return 0;
        -:  842:
        -:  843:	case smithy:
        -:  844:	/*
        -:  845:      //+3 Cards
        -:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
        -:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:      return 0;
        -:  854:	*/
     3004:  855:	playSmithy(state, currentPlayer, handPos);
        -:  856:
        -:  857:	case village:
        -:  858:	/*
        -:  859:      //+1 Card
        -:  860:      drawCard(currentPlayer, state);
        -:  861:			
        -:  862:      //+2 Actions
        -:  863:      state->numActions = state->numActions + 2;
        -:  864:			
        -:  865:      //discard played card from hand
        -:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:      return 0;
        -:  868:	*/
     3005:  869:	playVillage(state, currentPlayer, handPos);
        -:  870:
        -:  871:	case baron:
     3005:  872:	    state->numBuys++;//Increase buys by 1!
     3005:  873:	    if (choice1 > 0){//Boolean true or going to discard an estate
     1422:  874:		int p = 0;//Iterator for hand!
     1422:  875:		int card_not_discarded = 1;//Flag for discard set!
    34162:  876:		while(card_not_discarded){
    31318:  877:		    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1298:  878:			state->coins += 4;//Add 4 coins to the amount of coins
     1298:  879:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1298:  880:			state->discardCount[currentPlayer]++;
   333302:  881:			for (;p < state->handCount[currentPlayer]; p++){
   332004:  882:			    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  883:			}
     1298:  884:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1298:  885:			state->handCount[currentPlayer]--;
     1298:  886:			card_not_discarded = 0;//Exit the loop
        -:  887:		    }
    30020:  888:		    else if (p > state->handCount[currentPlayer]){
        -:  889:			if(DEBUG) {
        -:  890:			    printf("No estate cards in your hand, invalid choice\n");
        -:  891:			    printf("Must gain an estate if there are any\n");
        -:  892:			}
      124:  893:			if (supplyCount(estate, state) > 0){
      124:  894:			    gainCard(estate, state, 0, currentPlayer);
      124:  895:			    state->supplyCount[estate]--;//Decrement estates
      124:  896:			    if (supplyCount(estate, state) == 0){
    #####:  897:				isGameOver(state);
        -:  898:			    }
        -:  899:			}
      124:  900:			card_not_discarded = 0;//Exit the loop
        -:  901:		    }
        -:  902:
        -:  903:		    else{
    29896:  904:			p++;//Next card
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:
        -:  909:	    else{
     1583:  910:		if (supplyCount(estate, state) > 0){
     1583:  911:		    gainCard(estate, state, 0, currentPlayer);//Gain an estate
     1583:  912:		    state->supplyCount[estate]--;//Decrement Estates
     1583:  913:		    if (supplyCount(estate, state) == 0){
    #####:  914:			isGameOver(state);
        -:  915:		    }
        -:  916:		}
        -:  917:	    }
        -:  918:
        -:  919:
     3005:  920:	    return 0;
        -:  921:
        -:  922:	case great_hall:
        -:  923:	/*
        -:  924:      //+1 Card
        -:  925:      drawCard(currentPlayer, state);
        -:  926:			
        -:  927:      //+1 Actions
        -:  928:      state->numActions++;
        -:  929:			
        -:  930:      //discard card from hand
        -:  931:      discardCard(handPos, currentPlayer, state, 0);
        -:  932:      return 0;
        -:  933:	*/
    #####:  934:	 playGreatHall(state, currentPlayer, handPos);
        -:  935:
        -:  936:	case minion:
        -:  937:	    //+1 action
    #####:  938:	    state->numActions++;
        -:  939:
        -:  940:	    //discard card from hand
    #####:  941:	    discardCard(handPos, currentPlayer, state, 0);
        -:  942:
    #####:  943:	    if (choice1)		//+2 coins
        -:  944:	    {
    #####:  945:		state->coins = state->coins + 2;
        -:  946:	    }
        -:  947:
    #####:  948:	    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  949:	    {
        -:  950:		//discard hand
    #####:  951:		while(numHandCards(state) > 0)
        -:  952:		{
    #####:  953:		    discardCard(handPos, currentPlayer, state, 0);
        -:  954:		}
        -:  955:
        -:  956:		//draw 4
    #####:  957:		for (i = 0; i < 4; i++)
        -:  958:		{
    #####:  959:		    drawCard(currentPlayer, state);
        -:  960:		}
        -:  961:
        -:  962:		//other players discard hand and redraw if hand size > 4
    #####:  963:		for (i = 0; i < state->numPlayers; i++)
        -:  964:		{
    #####:  965:		    if (i != currentPlayer)
        -:  966:		    {
    #####:  967:			if ( state->handCount[i] > 4 )
        -:  968:			{
        -:  969:			    //discard hand
    #####:  970:			    while( state->handCount[i] > 0 )
        -:  971:			    {
    #####:  972:				discardCard(handPos, i, state, 0);
        -:  973:			    }
        -:  974:
        -:  975:			    //draw 4
    #####:  976:			    for (j = 0; j < 4; j++)
        -:  977:			    {
    #####:  978:				drawCard(i, state);
        -:  979:			    }
        -:  980:			}
        -:  981:		    }
        -:  982:		}
        -:  983:
        -:  984:	    }
    #####:  985:	    return 0;
        -:  986:
        -:  987:	case steward:
    #####:  988:	    if (choice1 == 1)
        -:  989:	    {
        -:  990:		//+2 cards
    #####:  991:		drawCard(currentPlayer, state);
    #####:  992:		drawCard(currentPlayer, state);
        -:  993:	    }
    #####:  994:	    else if (choice1 == 2)
        -:  995:	    {
        -:  996:		//+2 coins
    #####:  997:		state->coins = state->coins + 2;
        -:  998:	    }
        -:  999:	    else
        -: 1000:	    {
        -: 1001:		//trash 2 cards in hand
    #####: 1002:		discardCard(choice2, currentPlayer, state, 1);
    #####: 1003:		discardCard(choice3, currentPlayer, state, 1);
        -: 1004:	    }
        -: 1005:
        -: 1006:	    //discard card from hand
    #####: 1007:	    discardCard(handPos, currentPlayer, state, 0);
    #####: 1008:	    return 0;
        -: 1009:
        -: 1010:	case tribute:
    #####: 1011:	    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1012:		if (state->deckCount[nextPlayer] > 0){
    #####: 1013:		    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1014:		    state->deckCount[nextPlayer]--;
        -: 1015:		}
    #####: 1016:		else if (state->discardCount[nextPlayer] > 0){
    #####: 1017:		    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1018:		    state->discardCount[nextPlayer]--;
        -: 1019:		}
        -: 1020:		else{
        -: 1021:		    //No Card to Reveal
        -: 1022:		    if (DEBUG){
        -: 1023:			printf("No cards to reveal\n");
        -: 1024:		    }
        -: 1025:		}
        -: 1026:	    }
        -: 1027:
        -: 1028:	    else{
    #####: 1029:		if (state->deckCount[nextPlayer] == 0){
    #####: 1030:		    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1031:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1032:			state->deckCount[nextPlayer]++;
    #####: 1033:			state->discard[nextPlayer][i] = -1;
    #####: 1034:			state->discardCount[nextPlayer]--;
        -: 1035:		    }
        -: 1036:
    #####: 1037:		    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1038:		} 
    #####: 1039:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:		state->deckCount[nextPlayer]--;
    #####: 1042:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:		state->deckCount[nextPlayer]--;
        -: 1045:	    }    
        -: 1046:
    #####: 1047:	    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1048:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1049:		state->playedCardCount++;
    #####: 1050:		tributeRevealedCards[1] = -1;
        -: 1051:	    }
        -: 1052:
    #####: 1053:	    for (i = 0; i <= 2; i ++){
    #####: 1054:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1055:		    state->coins += 2;
        -: 1056:		}
        -: 1057:
    #####: 1058:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1059:		    drawCard(currentPlayer, state);
    #####: 1060:		    drawCard(currentPlayer, state);
        -: 1061:		}
        -: 1062:		else{//Action Card
    #####: 1063:		    state->numActions = state->numActions + 2;
        -: 1064:		}
        -: 1065:	    }
        -: 1066:
    #####: 1067:	    return 0;
        -: 1068:
        -: 1069:	case ambassador:
    #####: 1070:	    j = 0;		//used to check if player has enough cards to discard
        -: 1071:
    #####: 1072:	    if (choice2 > 2 || choice2 < 0)
        -: 1073:	    {
    #####: 1074:		return -1;				
        -: 1075:	    }
        -: 1076:
    #####: 1077:	    if (choice1 == handPos)
        -: 1078:	    {
    #####: 1079:		return -1;
        -: 1080:	    }
        -: 1081:
    #####: 1082:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1083:	    {
    #####: 1084:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1085:		{
    #####: 1086:		    j++;
        -: 1087:		}
        -: 1088:	    }
    #####: 1089:	    if (j < choice2)
        -: 1090:	    {
    #####: 1091:		return -1;				
        -: 1092:	    }
        -: 1093:
        -: 1094:	    if (DEBUG) 
        -: 1095:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1096:
        -: 1097:	    //increase supply count for choosen card by amount being discarded
    #####: 1098:	    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1099:
        -: 1100:	    //each other player gains a copy of revealed card
    #####: 1101:	    for (i = 0; i < state->numPlayers; i++)
        -: 1102:	    {
    #####: 1103:		if (i != currentPlayer)
        -: 1104:		{
    #####: 1105:		    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1106:		}
        -: 1107:	    }
        -: 1108:
        -: 1109:	    //discard played card from hand
    #####: 1110:	    discardCard(handPos, currentPlayer, state, 0);			
        -: 1111:
        -: 1112:	    //trash copies of cards returned to supply
    #####: 1113:	    for (j = 0; j < choice2; j++)
        -: 1114:	    {
    #####: 1115:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:		{
    #####: 1117:		    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1118:		    {
    #####: 1119:			discardCard(i, currentPlayer, state, 1);
    #####: 1120:			break;
        -: 1121:		    }
        -: 1122:		}
        -: 1123:	    }			
        -: 1124:
    #####: 1125:	    return 0;
        -: 1126:
        -: 1127:	case cutpurse:
        -: 1128:
    #####: 1129:	    updateCoins(currentPlayer, state, 2);
    #####: 1130:	    for (i = 0; i < state->numPlayers; i++)
        -: 1131:	    {
    #####: 1132:		if (i != currentPlayer)
        -: 1133:		{
    #####: 1134:		    for (j = 0; j < state->handCount[i]; j++)
        -: 1135:		    {
    #####: 1136:			if (state->hand[i][j] == copper)
        -: 1137:			{
    #####: 1138:			    discardCard(j, i, state, 0);
    #####: 1139:			    break;
        -: 1140:			}
    #####: 1141:			if (j == state->handCount[i])
        -: 1142:			{
    #####: 1143:			    for (k = 0; k < state->handCount[i]; k++)
        -: 1144:			    {
        -: 1145:				if (DEBUG)
        -: 1146:				    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1147:			    }	
    #####: 1148:			    break;
        -: 1149:			}		
        -: 1150:		    }
        -: 1151:
        -: 1152:		}
        -: 1153:
        -: 1154:	    }				
        -: 1155:
        -: 1156:	    //discard played card from hand
    #####: 1157:	    discardCard(handPos, currentPlayer, state, 0);			
        -: 1158:
    #####: 1159:	    return 0;
        -: 1160:
        -: 1161:
        -: 1162:	case embargo: 
        -: 1163:	    //+2 Coins
    #####: 1164:	    state->coins = state->coins + 2;
        -: 1165:
        -: 1166:	    //see if selected pile is in play
    #####: 1167:	    if ( state->supplyCount[choice1] == -1 )
        -: 1168:	    {
    #####: 1169:		return -1;
        -: 1170:	    }
        -: 1171:
        -: 1172:	    //add embargo token to selected supply pile
    #####: 1173:	    state->embargoTokens[choice1]++;
        -: 1174:
        -: 1175:	    //trash card
    #####: 1176:	    discardCard(handPos, currentPlayer, state, 1);		
    #####: 1177:	    return 0;
        -: 1178:
        -: 1179:	case outpost:
        -: 1180:	    //set outpost flag
    #####: 1181:	    state->outpostPlayed++;
        -: 1182:
        -: 1183:	    //discard card
    #####: 1184:	    discardCard(handPos, currentPlayer, state, 0);
    #####: 1185:	    return 0;
        -: 1186:
        -: 1187:	case salvager:
        -: 1188:	    //+1 buy
     3034: 1189:	    state->numBuys++;
        -: 1190:
     3034: 1191:	    if (choice1)
        -: 1192:	    {
        -: 1193:		//gain coins equal to trashed card
     1436: 1194:		state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1195:		//trash card
     1436: 1196:		discardCard(choice1, currentPlayer, state, 1);	
        -: 1197:	    }
        -: 1198:
        -: 1199:	    //discard card
     3034: 1200:	    discardCard(handPos, currentPlayer, state, 0);
     3034: 1201:	    return 0;
        -: 1202:
        -: 1203:	case sea_hag:
    #####: 1204:	    for (i = 0; i < state->numPlayers; i++){
    #####: 1205:		if (i != currentPlayer){
    #####: 1206:		    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1207:		    state->discardCount[i]++;
    #####: 1208:		    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1209:		}
        -: 1210:	    }
    #####: 1211:	    return 0;
        -: 1212:
        -: 1213:	case treasure_map:
        -: 1214:	    //search hand for another treasure_map
    #####: 1215:	    index = -1;
    #####: 1216:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	    {
    #####: 1218:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:		{
    #####: 1220:		    index = i;
    #####: 1221:		    break;
        -: 1222:		}
        -: 1223:	    }
    #####: 1224:	    if (index > -1)
        -: 1225:	    {
        -: 1226:		//trash both treasure cards
    #####: 1227:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:		discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:		//gain 4 Gold cards
    #####: 1231:		for (i = 0; i < 4; i++)
        -: 1232:		{
    #####: 1233:		    gainCard(gold, state, 1, currentPlayer);
        -: 1234:		}
        -: 1235:
        -: 1236:		//return success
    #####: 1237:		return 1;
        -: 1238:	    }
        -: 1239:
        -: 1240:	    //no second treasure_map found in hand
    #####: 1241:	    return -1;
        -: 1242:    }
        -: 1243:
    #####: 1244:    return -1;
        -: 1245:}
        -: 1246:
        -: 1247:/*Assignment 2: Refactored Functions*/
     1001: 1248:int playAdventurer(struct gameState *state, int currentPlayer, int *temphand)
        -: 1249:{
        -: 1250:	int cardDrawn;
     1001: 1251:	int z = 0;
     1001: 1252:	int drawntreasure = 0;
        -: 1253:	
     4746: 1254:	while(drawntreasure < 2)//removed "="
        -: 1255:	{
        -: 1256:		//removed empty deck check, already covered by drawCard
     2744: 1257:		drawCard(currentPlayer, state);
     2744: 1258:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     2744: 1259:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1260:		{
     2002: 1261:		  drawntreasure++;
        -: 1262:		}
        -: 1263:		
        -: 1264:		else
        -: 1265:		{
      742: 1266:		  temphand[z] = cardDrawn;
      742: 1267:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      742: 1268:		  z++;
        -: 1269:		}
        -: 1270:    }
        -: 1271:      
     2744: 1272:	while(z-1 >= 0)
        -: 1273:	{
      742: 1274:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn //discardCount ++
      742: 1275:		z--;
        -: 1276:    }
        -: 1277:	
     1001: 1278:	return 0;
        -: 1279:}
        -: 1280:
    #####: 1281:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -: 1282:{
        -: 1283:	int i;
        -: 1284:	//+4 Cards
    #####: 1285:    for (i = 0; i < 4; i++)
        -: 1286:	{
    #####: 1287:	  drawCard(currentPlayer, state);
        -: 1288:	}
        -: 1289:			
        -: 1290:    //+1 Buy
    #####: 1291:    state->numBuys++;
        -: 1292:	//(BUG: increase numBuys twice)
    #####: 1293:	state->numBuys++;
        -: 1294:			
        -: 1295:    //Each other player draws a card
    #####: 1296:    for (i = 0; i < state->numPlayers; i++)
        -: 1297:	{
    #####: 1298:	  if ( i != currentPlayer )
        -: 1299:	    {
    #####: 1300:	      drawCard(i, state);
        -: 1301:	    }
        -: 1302:	}
        -: 1303:			
        -: 1304:    //put played card in played card pile
    #####: 1305:    discardCard(handPos, currentPlayer, state, 0);		
        -: 1306:    
    #####: 1307:	return 0;
        -: 1308:}
        -: 1309:
    #####: 1310:int playGreatHall(struct gameState *state, int currentPlayer, int handPos){
        -: 1311:	//+1 Card
    #####: 1312:    drawCard(currentPlayer, state);
        -: 1313:	//(BUG: Draws an extra card)
    #####: 1314:	drawCard(currentPlayer, state); 
        -: 1315:			
        -: 1316:    //+1 Actions
    #####: 1317:    state->numActions++;
        -: 1318:			
        -: 1319:    //discard card from hand
    #####: 1320:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1321:    return 0;
        -: 1322:}
        -: 1323:
     3004: 1324:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1325:	//+3 Cards (BUG: DRAWS 4 CARDS)
     3004: 1326:	int i = 0;
    15020: 1327:    for (i = 0; i <= 3; i++)
        -: 1328:	{
    12016: 1329:	  drawCard(currentPlayer, state);
        -: 1330:	}
        -: 1331:			
        -: 1332:    //discard card from hand
     3004: 1333:    discardCard(handPos, currentPlayer, state, 0);
     3004: 1334:    return 0;
        -: 1335:}
        -: 1336:
     3005: 1337:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -: 1338:    //+1 Card
     3005: 1339:    drawCard(currentPlayer, state);
        -: 1340:			
        -: 1341:    //+2 Actions (BUG: increase actions by 1 only)
     3005: 1342:    state->numActions = state->numActions + 1;
        -: 1343:			
        -: 1344:    //discard played card from hand
     3005: 1345:    discardCard(handPos, currentPlayer, state, 0);
     3005: 1346:    return 0;
        -: 1347:	
        -: 1348:}
        -: 1349:
        -: 1350:/*Assignment 2: End*/
        -: 1351:
        -: 1352:
    10479: 1353:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1354:{
        -: 1355:    //if card is not trashed, added to Played pile 
    10479: 1356:    if (trashFlag < 1)
        -: 1357:    {
        -: 1358:	//add card to played pile
     9043: 1359:	state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     9043: 1360:	state->playedCardCount++;
        -: 1361:    }
        -: 1362:
        -: 1363:    //set played card to -1
    10479: 1364:    state->hand[currentPlayer][handPos] = -1;
        -: 1365:
        -: 1366:    //remove card from player's hand
    10479: 1367:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1368:    {
        -: 1369:	//reduce number of cards in hand
       49: 1370:	state->handCount[currentPlayer]--;
        -: 1371:    }
    10430: 1372:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1373:    {
        -: 1374:	//reduce number of cards in hand
        6: 1375:	state->handCount[currentPlayer]--;
        -: 1376:    }
        -: 1377:    else 	
        -: 1378:    {
        -: 1379:	//replace discarded card with last card in hand
    10424: 1380:	state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1381:	//set last card to -1
    10424: 1382:	state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1383:	//reduce number of cards in hand
    10424: 1384:	state->handCount[currentPlayer]--;
        -: 1385:    }
        -: 1386:
    10479: 1387:    return 0;
        -: 1388:}
        -: 1389:
     1710: 1390:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1391:{
        -: 1392:    //Note: supplyPos is enum of choosen card
        -: 1393:
        -: 1394:    //check if supply pile is empty (0) or card is not used in game (-1)
     1710: 1395:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1396:    {
    #####: 1397:	return -1;
        -: 1398:    }
        -: 1399:
        -: 1400:    //added card for [whoseTurn] current player:
        -: 1401:    // toFlag = 0 : add to discard
        -: 1402:    // toFlag = 1 : add to deck
        -: 1403:    // toFlag = 2 : add to hand
        -: 1404:
     1710: 1405:    if (toFlag == 1)
        -: 1406:    {
        1: 1407:	state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1408:	state->deckCount[player]++;
        -: 1409:    }
     1709: 1410:    else if (toFlag == 2)
        -: 1411:    {
        1: 1412:	state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1413:	state->handCount[player]++;
        -: 1414:    }
        -: 1415:    else
        -: 1416:    {
     1708: 1417:	state->discard[player][ state->discardCount[player] ] = supplyPos;
     1708: 1418:	state->discardCount[player]++;
        -: 1419:    }
        -: 1420:
        -: 1421:    //decrease number in supply pile
     1710: 1422:    state->supplyCount[supplyPos]--;
        -: 1423:
     1710: 1424:    return 0;
        -: 1425:}
        -: 1426:
    12045: 1427:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1428:{
        -: 1429:    int i;
        -: 1430:
        -: 1431:    //reset coin count
    12045: 1432:    state->coins = 0;
        -: 1433:
        -: 1434:    //add coins for each Treasure card in player's hand
   546976: 1435:    for (i = 0; i < state->handCount[player]; i++)
        -: 1436:    {
   534931: 1437:	if (state->hand[player][i] == copper)
        -: 1438:	{
    40496: 1439:	    state->coins += 1;
        -: 1440:	}
   494435: 1441:	else if (state->hand[player][i] == silver)
        -: 1442:	{
    #####: 1443:	    state->coins += 2;
        -: 1444:	}
   494435: 1445:	else if (state->hand[player][i] == gold)
        -: 1446:	{
    #####: 1447:	    state->coins += 3;
        -: 1448:	}	
        -: 1449:    }	
        -: 1450:
        -: 1451:    //add bonus
    12045: 1452:    state->coins += bonus;
        -: 1453:
    12045: 1454:    return 0;
        -: 1455:}
        -: 1456:
        -: 1457://end of dominion.c
